name: Test Deployment Setup

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'connection'
        type: choice
        options:
        - connection
        - validation
        - full

jobs:
  test-connection:
    name: Test SFTP Connection
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'connection' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: Test SFTP Connection
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.TURHOST_HOST }}
        username: ${{ secrets.TURHOST_USERNAME }}
        password: ${{ secrets.TURHOST_PASSWORD }}
        protocol: ftp
        port: 21
        local-dir: ./
        server-dir: /public_html/wp-content/themes/welmacart-v2/
        dry-run: true
        
    - name: Connection Test Result
      run: |
        echo "‚úÖ SFTP connection test completed successfully!"
        echo "üåê Host: ${{ secrets.TURHOST_HOST }}"
        echo "üë§ Username: ${{ secrets.TURHOST_USERNAME }}"
        echo "üìÅ Remote path: /public_html/wp-content/themes/welmacart-v2/"

  test-validation:
    name: Test File Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'validation' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        
    - name: Test PHP Validation
      run: |
        echo "üîç Testing PHP file validation..."
        
        # Count PHP files
        php_files=$(find . -name "*.php" -not -path "./.git/*" | wc -l)
        echo "üìä Found $php_files PHP files"
        
        # Test syntax validation
        echo "üß™ Testing syntax validation..."
        find . -name "*.php" -not -path "./.git/*" -exec php -l {} \; | head -10
        
        echo "‚úÖ PHP validation test completed!"
        
    - name: Test WordPress Structure
      run: |
        echo "üîç Testing WordPress theme structure..."
        
        # Check required files
        if [ -f "style.css" ]; then
          echo "‚úÖ style.css found"
        else
          echo "‚ùå style.css missing"
        fi
        
        if [ -f "index.php" ]; then
          echo "‚úÖ index.php found"
        else
          echo "‚ùå index.php missing"
        fi
        
        if [ -f "functions.php" ]; then
          echo "‚úÖ functions.php found"
        else
          echo "‚ö†Ô∏è functions.php not found (optional)"
        fi
        
        # Check style.css header
        if grep -q "Theme Name:" style.css; then
          echo "‚úÖ Theme header found in style.css"
        else
          echo "‚ùå Theme header missing in style.css"
        fi
        
        echo "‚úÖ WordPress structure test completed!"

  test-file-exclusion:
    name: Test File Exclusion Rules
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Exclusion Rules
      run: |
        echo "üîç Testing file exclusion rules..."
        
        # Create test deployment directory
        mkdir -p test-deployment
        
        # Copy files with exclusions (same as deployment)
        rsync -av --progress . test-deployment/ \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='.vscode' \
          --exclude='node_modules' \
          --exclude='*.log' \
          --exclude='.DS_Store' \
          --exclude='*.disabled' \
          --exclude='*-backup.php' \
          --exclude='*-safe.php' \
          --exclude='template-debug.php' \
          --exclude='inc/debug.php' \
          --exclude='test-deployment'
          
        echo "üìä Files that would be deployed:"
        find test-deployment -type f | head -20
        
        total_files=$(find test-deployment -type f | wc -l)
        echo "üìà Total files: $total_files"
        
        # Check for excluded files
        excluded_found=false
        
        if find test-deployment -name "*-backup.php" | grep -q .; then
          echo "‚ùå Backup files found in deployment package"
          excluded_found=true
        fi
        
        if find test-deployment -name "*.disabled" | grep -q .; then
          echo "‚ùå Disabled files found in deployment package"
          excluded_found=true
        fi
        
        if [ -d "test-deployment/.git" ]; then
          echo "‚ùå .git directory found in deployment package"
          excluded_found=true
        fi
        
        if [ "$excluded_found" = false ]; then
          echo "‚úÖ All exclusion rules working correctly!"
        else
          echo "‚ùå Some exclusion rules failed!"
          exit 1
        fi

  notify-test-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test-connection, test-validation, test-file-exclusion]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "üß™ Deployment Setup Test Results"
        echo "================================"
        
        if [ "${{ needs.test-connection.result }}" = "success" ]; then
          echo "‚úÖ SFTP Connection: PASSED"
        elif [ "${{ needs.test-connection.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è SFTP Connection: SKIPPED"
        else
          echo "‚ùå SFTP Connection: FAILED"
        fi
        
        if [ "${{ needs.test-validation.result }}" = "success" ]; then
          echo "‚úÖ File Validation: PASSED"
        elif [ "${{ needs.test-validation.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è File Validation: SKIPPED"
        else
          echo "‚ùå File Validation: FAILED"
        fi
        
        if [ "${{ needs.test-file-exclusion.result }}" = "success" ]; then
          echo "‚úÖ File Exclusion: PASSED"
        elif [ "${{ needs.test-file-exclusion.result }}" = "skipped" ]; then
          echo "‚è≠Ô∏è File Exclusion: SKIPPED"
        else
          echo "‚ùå File Exclusion: FAILED"
        fi
        
        echo ""
        echo "üöÄ Setup Status: Ready for deployment!"
